name: Add Word

on:
  workflow_dispatch:
    inputs:
      word:
        description: 'The word to add'
        required: true
        type: string
      date:
        description: 'Date to add the word to (YYYY-MM-DD). Leave empty for today.'
        required: false
        type: string
      overwrite:
        description: 'Overwrite existing word if one exists for the date'
        required: false
        type: boolean
        default: false
  repository_dispatch:
    types:
      - add-word

permissions:
  contents: write

jobs:
  prepare-manual:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      word: ${{ steps.set-outputs.outputs.word }}
      date: ${{ steps.set-outputs.outputs.date }}
      overwrite: ${{ steps.set-outputs.outputs.overwrite }}
    steps:
      - name: Set outputs
        id: set-outputs
        run: |
          echo "word=${{ inputs.word }}" >> $GITHUB_OUTPUT
          echo "date=${{ inputs.date || '' }}" >> $GITHUB_OUTPUT
          echo "overwrite=${{ inputs.overwrite }}" >> $GITHUB_OUTPUT

  prepare-webhook:
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    outputs:
      word: ${{ steps.set-outputs.outputs.word }}
      date: ${{ steps.set-outputs.outputs.date }}
      overwrite: ${{ steps.set-outputs.outputs.overwrite }}
    steps:
      - name: Check webhook secret
        run: |
          if [ "${{ github.event.client_payload.secret }}" != "${{ secrets.WORKFLOW_TOKEN_ADD_WORD }}" ]; then
            echo "Invalid webhook secret"
            exit 1
          fi

      - name: Set outputs
        id: set-outputs
        run: |
          echo "word=$(echo '${{ github.event.client_payload }}' | jq -r '.word')" >> $GITHUB_OUTPUT
          echo "date=$(echo '${{ github.event.client_payload }}' | jq -r '.date // empty')" >> $GITHUB_OUTPUT
          echo "overwrite=$(echo '${{ github.event.client_payload }}' | jq -r '.overwrite // false')" >> $GITHUB_OUTPUT

  add-word:
    needs: [prepare-manual, prepare-webhook]
    if: always() && (needs.prepare-manual.result == 'success' || needs.prepare-webhook.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Add word
        id: add_word
        run: |
          # Get outputs from whichever job succeeded
          WORD="${{ needs.prepare-manual.outputs.word || needs.prepare-webhook.outputs.word }}"
          DATE="${{ needs.prepare-manual.outputs.date || needs.prepare-webhook.outputs.date }}"
          OVERWRITE="${{ needs.prepare-manual.outputs.overwrite || needs.prepare-webhook.outputs.overwrite }}"

          OVERWRITE_FLAG=""
          if [[ "$OVERWRITE" == "true" ]]; then
            OVERWRITE_FLAG="--overwrite"
          fi

          if npm run tool:add-word -- "$WORD" "$DATE" $OVERWRITE_FLAG; then
            echo "word_added=1" >> $GITHUB_OUTPUT
            echo "word=$WORD" >> $GITHUB_OUTPUT
          else
            echo "word_added=0" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        if: steps.add_word.outputs.word_added == '1'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push changes
        if: steps.add_word.outputs.word_added == '1'
        run: |
          git add src/data/words/
          git commit -m "Add word: ${{ steps.add_word.outputs.word }}"
          git push origin ${{ github.ref }}
