---
import Layout from '~layouts/Layout.astro';
import Heading from '~components/Heading.astro';
import WordLink from '~components/WordLink.astro';
import SectionHeading from '~components/SectionHeading.astro';
import { getAllWords, getWordStats, getLetterStats, getStreakStats, countSyllables } from '~utils/word-utils.js';
import { getUrl } from '~utils/utils';

// Get all words and sort by date
const words = getAllWords().sort((a, b) => a.date.localeCompare(b.date));
const totalWords = words.length;
const firstWord = words[0];
const latestWord = words[words.length - 1];
const wordStats = getWordStats(words);
const letterStats = getLetterStats(wordStats.letterFrequency);
const { longestStreak } = getStreakStats(words);

// Find word with most syllables and least syllables
const wordWithMostSyllables = words.reduce((max, curr) => {
    const currSyllables = countSyllables(curr.word);
    const maxSyllables = countSyllables(max.word);
    return currSyllables > maxSyllables ? curr : max;
}, words[0]);

const wordWithLeastSyllables = words.reduce((min, curr) => {
    const currSyllables = countSyllables(curr.word);
    const minSyllables = countSyllables(min.word);
    return currSyllables < minSyllables ? curr : min;
}, words[0]);

const formatDate = (dateStr) => {
    const date = new Date(dateStr.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3'));
    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
};

// Get all vowels and consonants words
const allVowels = words.filter(w => /^[aeiou]+$/i.test(w.word));
const allConsonants = words.filter(w => /^[^aeiou]+$/i.test(w.word));
const palindromes = words.filter(w => w.word.toLowerCase() === w.word.toLowerCase().split('').reverse().join(''));

// Count vowels and consonants in each word
const getVowelCount = (word) => (word.match(/[aeiou]/gi) || []).length;
const getConsonantCount = (word) => (word.match(/[bcdfghjklmnpqrstvwxyz]/gi) || []).length;

const mostVowels = words.reduce((max, curr) => {
    const count = getVowelCount(curr.word);
    return count > getVowelCount(max.word) ? curr : max;
}, words[0]);

const mostConsonants = words.reduce((max, curr) => {
    const count = getConsonantCount(curr.word);
    return count > getConsonantCount(max.word) ? curr : max;
}, words[0]);

// Find the dates for our words
const findWordDate = (targetWord) => {
    return words.find(w => w.word === targetWord)?.date;
};
---

<Layout title="Stats | Bug's Word of the Day">
    <main class="stats">
        <Heading text="Stats" secondaryText="For Nerds" />

        <section class="stats__section">
            <div class="stats__list">
                <div class="stats__item">
                    <div class="stats__fact">total words</div>
                    <div class="stats__value">
                        <a href="/words" class="stats__link">{totalWords}</a>
                    </div>
                </div>
                <div class="stats__item">
                    <div class="stats__fact">first word</div>
                    <WordLink word={firstWord} />
                </div>
                <div class="stats__item">
                    <div class="stats__fact">latest word</div>
                    <WordLink word={latestWord} />
                </div>
            </div>
        </section>

        <section class="stats__section">
            <h2 class="stats__heading">Word Facts</h2>
            <div class="stats__list">
                <div class="stats__item">
                    <div class="stats__fact">shortest ({wordStats.shortest.length} letters)</div>
                    <WordLink word={{
                        word: wordStats.shortest.word,
                        date: findWordDate(wordStats.shortest.word)
                    }} />
                </div>
                <div class="stats__item">
                    <div class="stats__fact">longest ({wordStats.longest.length} letters)</div>
                    <WordLink word={{
                        word: wordStats.longest.word,
                        date: findWordDate(wordStats.longest.word)
                    }} />
                </div>
                <div class="stats__item">
                    <div class="stats__fact">least syllables ({countSyllables(wordWithLeastSyllables.word)})</div>
                    <WordLink word={wordWithLeastSyllables} />
                </div>
                <div class="stats__item">
                    <div class="stats__fact">most syllables ({countSyllables(wordWithMostSyllables.word)})</div>
                    <WordLink word={wordWithMostSyllables} />
                </div>
                <div class="stats__item">
                    <div class="stats__fact">most common letter ({letterStats[0][1]} words)</div>
                    <div class="value">
                        {letterStats[0][0]}
                    </div>
                </div>
                <div class="stats__item">
                    <div class="stats__fact">least common letter ({letterStats[letterStats.length - 1][1]} word{letterStats[letterStats.length - 1][1] !== 1 ? 's' : ''})</div>
                    <div class="value">
                        {letterStats[letterStats.length - 1][0]}
                    </div>
                </div>
                <div class="stats__item">
                    <div class="stats__fact">most vowels ({getVowelCount(mostVowels.word)})</div>
                    <WordLink word={{
                        word: mostVowels.word,
                        date: mostVowels.date
                    }} />
                </div>
                <div class="stats__item">
                    <div class="stats__fact">most consonants ({getConsonantCount(mostConsonants.word)})</div>
                    <WordLink word={{
                        word: mostConsonants.word,
                        date: mostConsonants.date
                    }} />
                </div>
                {palindromes.length > 0 && (
                    <div class="stats__item">
                        <div class="stats__fact">palindromes</div>
                        <div class="value">
                            {palindromes.map(w => w.word).join(', ')}
                        </div>
                    </div>
                )}
                {allConsonants.length > 0 && (
                    <div class="stats__item">
                        <div class="stats__fact">all consonants</div>
                        <div class="value">
                            {allConsonants.map(w => w.word).join(', ')}
                        </div>
                    </div>
                )}
                {allVowels.length > 0 && (
                    <div class="stats__item">
                        <div class="stats__fact">all vowels</div>
                        <div class="value">
                            {allVowels.map(w => w.word).join(', ')}
                        </div>
                    </div>
                )}
            </div>
        </section>

        <section class="stats__section">
            <h2 class="stats__heading">Streaks</h2>
            <div class="stats__list">
                <div class="stats__item">
                    <div class="stats__fact">longest daily streak</div>
                    <div class="value">
                        {longestStreak} days
                    </div>
                </div>
            </div>
        </section>
    </main>
</Layout>

<style>
    .stats {
        max-width: var(--content-width-medium);
        margin: 0 auto;
    }

    .stats__section {
        margin-bottom: var(--spacing-large);
    }

    .stats__heading {
        font-size: var(--font-size-base);
        margin-bottom: var(--spacing-base);
        color: var(--color-primary-light);
        border-bottom: 1px solid var(--color-primary-light);
        padding-bottom: 0.5rem;
        text-transform: lowercase;
    }

    .stats__list {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-small);
    }

    .stats__item {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-small);
        padding-block: var(--spacing-small);
        border-bottom: 1px solid var(--color-border);
    }

    .stats__fact {
        color: var(--color-text-light);
        text-transform: lowercase;
    }

    .stats__value {
        font-size: 1.1rem;
        font-weight: 500;
    }

    .stats__link {
        color: var(--color-primary-light);
        text-decoration: none;
        transition: opacity 0.2s ease;
    }

    .stats__link:hover {
        opacity: 0.7;
    }

    /* Stats-specific styles */
    .stats :global(a) {
        font-size: 1.1rem;
        font-weight: 500;
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .stats :global(time) {
        color: var(--color-text-lighter);
        font-size: 0.8rem;
        font-weight: normal;
    }

    /* Consistent styling for all values */
    .value {
        font-size: 1.1rem;
        font-weight: 500;
        color: var(--color-text);
    }

    .value--link,
    .value--link:visited {
        color: var(--color-primary-light);
        text-decoration: none;
        transition: opacity 0.2s ease;
    }

    .value--link:hover,
    .value--link:focus {
        opacity: 0.7;
        color: var(--color-primary-light);
    }

    /* Desktop styles */
    @media (min-width: 481px) {
        .stats__section {
            margin-bottom: var(--spacing-large);
        }

        .stats__item {
            flex-direction: row;
            justify-content: space-between;
            align-items: baseline;
            padding-block: 0;
        }

        .stats__fact {
            flex-shrink: 0;
        }

        .stats :global(a) {
            flex-direction: row;
            gap: var(--spacing-small);
            text-align: right;
        }

        .stats :global(time) {
            margin: 0;
        }

        .value {
            text-align: right;
            min-width: 0;
            flex-grow: 1;
        }
    }
</style>
